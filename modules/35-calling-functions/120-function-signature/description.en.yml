---

name: Function signature
theory: |

  The `Math.pow()` function, which raises a number to any power, takes two parameters: **a number to raise** and **a power to raise**. If you call `pow()` without parameters, it returns `NaN`. The function honestly tries to perform exponentiation, but with no value passed, the interpreter automatically passes `undefined` to it. JavaScript forces programmers to be more careful than other languages. In most languages, if you pass fewer parameters to a function than it expects, an error will occur, but not in JavaScript. `NaN` will also return when passing any non-numeric values:

  ```javascript
  const result = Math.pow(2, 'boom');
  console.log(result); // => NaN
  ```

  Another function can have a different amount and type of parameters. For example, there may be a function that takes three parameters: a number, a string, and another number.

  How do we know how many parameters the `Math.pow()` function needs and what type the `return` will be? We took a look at the **signature** of that function. The signature defines the input parameters and their types, as well as the output parameter and its type. You can read about the `Math.pow()` function in [the documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow). In the "Syntax" section you see this:

  ```
  Math.pow(base, exponent)

  Parameters
    base
      The base number.
    exponent
      The exponent used to raise the base.
  ```

  It is a function signature and a short explanation. The documentation shows you how many arguments the function has and its type, whether the function returns something, and if so, what its return value type is.

instructions: |

  Now it's your turn to find the function signature in the documentation and figure out how to use it.

  There is a function in `Math` called `ceil()`. Study its [documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil).

  Write a program using the `Math.ceil()` function with a constant `number` and print the result.

tips: []

definitions:
  - name: Function signature
    description: is a formal description of the parameter types and the type of the return value of the function.
